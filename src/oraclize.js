var $ = require('jquery')
var ethJSABI = require('ethereumjs-abi')
var request = require('request')
var bs58 = require('bs58')
var cbor = require('cbor') //requires babel-polyfill

var generateOraclize = function (vmInstance,account) {
  vmInstance.executionContext.event.register('contextChanged', this, function (context) {
    if(context!='vm'){
      $('#oraclizeView').css("background-color","#FF9393")
      $('#oraclizeNotAvailable').show()
      $('#oraclizeVM').hide()
      $('#queryNotification').hide()
      $('#oraclizeWarning').show()
      $('#oraclizeImg').addClass("blackAndWhite")
    } else {
      $('#oraclizeWarning').hide()
      $('#oraclizeView').css("background-color","#F4F6FF")
      $('#oraclizeNotAvailable').hide()
      $('#oraclizeVM').show()
      generateOraclize(vmInstance,"0x265a5c3dd46ec82e2744f1d0e9fb4ed75d56132a")
    }
  })
  if(!vmInstance.executionContext.isVM()){
    $('#oraclizeView').css("background-color","#FF9393")
    $('#oraclizeNotAvailable').show()
    $('#oraclizeVM').hide()
    $('#queryNotification').hide()
    $('#oraclizeWarning').show()
    $('#oraclizeImg').addClass("blackAndWhite")
    return;
  } else {
    $('#oraclizeWarning').hide()
    $('#oraclizeView').css("background-color","#F4F6FF")
    $('#oraclizeNotAvailable').hide()
    $('#oraclizeVM').show()
  }

  if(typeof(vmInstance.accounts)=='undefined') return

  // remove oraclize account from the transaction tab
  $('#txorigin option[value="'+account+'"]').remove()

  var oar = ''
  var oraclizeConn = ''
  console.log('Deploying with account: '+account)
  // https://gist.github.com/D-Nice/e2084c6a2c5c9162740dead367b68878
  var oraclizeConnector = ''
  // https://github.com/oraclize/ethereum-bridge/blob/94e2e0846e9643bf93cd48a998044cee9401ae64/contracts/ethereum-api/connectors/addressResolver.sol
  var oraclizeAddressResolver = '0x606060405260018054600160a060020a0319163317905560f3806100236000396000f3606060405260e060020a600035046338cc483181146038578063767800de146062578063a6f9dae1146073578063d1d80fdf146091575b005b600054600160a060020a03165b60408051600160a060020a03929092168252519081900360200190f35b6045600054600160a060020a031681565b603660043560015433600160a060020a0390811691161460af576002565b603660043560015433600160a060020a0390811691161460d1576002565b6001805473ffffffffffffffffffffffffffffffffffffffff19168217905550565b6000805473ffffffffffffffffffffffffffffffffffffffff1916821790555056'

  if(vmInstance.executionContext.isVM()){
    vmInstance.txRunner.rawRun({"from":account,"data":oraclizeConnector,"gasLimit":3000000}, function (err, result) {
      if(err) console.log(err);
      result = result.result
      var contractAddr = Buffer.from(result.createdAddress).toString('hex')
      oraclizeConn = "0x"+contractAddr
      console.log("Generated connector: "+oraclizeConn)
      var setCbAddress = "0x9bb51487000000000000000000000000"+account.replace('0x','')
      vmInstance.txRunner.rawRun({"from":account,"to":oraclizeConn,"data":setCbAddress,"gasLimit":3000000}, function (err, result) {
        if(err) console.log(err);
        // OAR generate
        vmInstance.txRunner.rawRun({"from":account,"data":oraclizeAddressResolver,"gasLimit":3000000}, function (err, result) {
          if(err) console.log(err);
          result = result.result
          var resultAddr = Buffer.from(result.createdAddress).toString('hex')
          oar = "0x"+resultAddr
          console.log("Generated oar: "+oar)
          var setAddr = "0xd1d80fdf000000000000000000000000"+(oraclizeConn.replace('0x',''))
          vmInstance.txRunner.rawRun({"from":account,"to":oar,"data":setAddr,"gasLimit":3000000}, function (err, result) {
            if(err) console.log(err);
            $('#oraclizeStatus').html('<span class="green">READY</span>')
            $('#oraclizeImg').removeClass("blackAndWhite")
            runLog(vmInstance,oraclizeConn)
          })
        })
      })
    })

    function runLog(vmInstance,connectorAddr){
      vmInstance.vm.on('afterTx', function (response) {
        for (var i in response.vm.logs) {
          var log = response.vm.logs[i]
          var decoded
          var log = response.vm.logs[i]
          if("0x"+log[0].toString('hex')==connectorAddr){
            var eventSignature = log[1][0].toString('hex')
            if(eventSignature=="b76d0edd90c6a07aa3ff7a222d7f5933e29c6acc660c059c97837f05c4ca1a84"){ // Log1 signature
              var types = ["address","bytes32","uint256","string","string","uint256","bytes1","uint256"] // event Log1
              decoded = ethJSABI.rawDecode(types, log[2])
              decoded = ethJSABI.stringify(types, decoded)
              decoded = {"sender":decoded[0],"cid":decoded[1],"timestamp":decoded[2],"datasource":decoded[3],"arg":decoded[4],"gaslimit":decoded[5],"proofType":decoded[6],"gasPrice":decoded[7]}
            } else if(eventSignature=="af30e4d66b2f1f23e63ef4591058a897f67e6867233e33ca3508b982dcc4129b"){ // Log2 signature
              var types = ["address","bytes32","uint256","string","string","string","uint256","bytes1","uint256"] // event Log2
              decoded = ethJSABI.rawDecode(types, log[2])
              decoded = ethJSABI.stringify(types, decoded)
              decoded = {"sender":decoded[0],"cid":decoded[1],"timestamp":decoded[2],"datasource":decoded[3],"arg1":decoded[4],"arg2":decoded[5],"gaslimit":decoded[6],"proofType":decoded[7],"gasPrice":decoded[8]}
            } else if(eventSignature=="3af7d71c651d8670228b02a0b636ffa73a7f759ef99ff9c024bc3b044a724438"){ // LogN signature
              var types = ["address","bytes32","uint256","string","bytes","uint256","bytes1","uint256"] // event LogN
              decoded = ethJSABI.rawDecode(types, log[2])
              decoded = ethJSABI.stringify(types, decoded)
              decoded = {"sender":decoded[0],"cid":decoded[1],"timestamp":decoded[2],"datasource":decoded[3],"args":decoded[4],"gaslimit":decoded[5],"proofType":decoded[6],"gasPrice":decoded[7]}
            }
            if(!$('#queryHistoryContainer').find('.datasource').length) $('#queryHistoryContainer').html('');
            console.log(decoded)
            var myid = decoded['cid']
            var myIdInitial = myid
            var cAddr = decoded['sender']
            var ds = decoded['datasource']
            if(typeof(decoded['arg']) != 'undefined'){
              var formula = decoded['arg']
            } else if(typeof(decoded['args']) != 'undefined') {
              var formula = cbor.decodeAllSync(Buffer.from(decoded['args'].substr(2), 'hex'))[0]
            } else {
              var arg2formula = decoded['arg2']
              var formula = [decoded['arg1'],arg2formula]
            }
            if($('#query_'+myIdInitial).length!=0){
              return
            }
            var dateQuery = new Date()
            dateQuery = dateQuery.getHours()+":"+dateQuery.getMinutes()+":"+dateQuery.getSeconds()
            var queryInfoTitle = "Time: "+dateQuery+"\n"+"myid: "+myIdInitial
            var queryHtml = "<div id='query_"+myIdInitial+"' title='"+queryInfoTitle+"' style='margin-bottom:4px;'><span><span class='datasource'>"+ds+"</span> "+formula+"</span><br></div>"
            $('#queryHistoryContainer').append(queryHtml)

            var time = parseInt(decoded['timestamp'])
            var gasLimit = parseInt(decoded['gaslimit'])
            var proofType = decoded['proofType']
            var query = {
                when: time,
                datasource: ds,
                query: formula,
                proof_type: parseInt(proofType)
            }
            console.log(formula)
            console.log(JSON.stringify(query))
            createQuery(query, function(data){
              console.log("Query : "+data)
              data = JSON.parse(data)
              myid = data.result.id
              console.log("New query created, id: "+myid)
              console.log("Checking query status every 5 seconds..")
              updateQueryNotification(1);
              var interval = setInterval(function(){
                // check query status
                checkQueryStatus(myid, function(data){
                  data = JSON.parse(data)
                  console.log("Query result: "+JSON.stringify(data))
                  if(data.result.checks==null) return;
                  var last_check = data.result.checks[data.result.checks.length-1]
                  var query_result = last_check.results[last_check.results.length-1]
                  var dataRes = query_result
                  var dataProof = data.result.checks[data.result.checks.length-1]['proofs'][0]
                  if (!last_check.success) return;
                  else clearInterval(interval)
                  if(dataProof==null && proofType!='0x00'){
                    dataProof = Buffer.from('')
                  } else if(typeof dataProof == 'object' && proofType!='0x00'){
                    if(typeof dataProof.type != 'undefined' && typeof dataProof.value != 'undefined'){
                      dataProof = Buffer.from(dataProof.value)
                    }
                  }
                  oraclizeCallback(vmInstance, account, gasLimit, myIdInitial, dataRes, dataProof, cAddr)
                })

              }, 5*1000)
            })
          }
        }
      })
    }
    function oraclizeCallback(vmInstance, mainAccount, gasLimit, myid, result, proof, contractAddr){
      if(proof==null){
        var callbackData = ethJSABI.rawEncode(["bytes32","string"],[myid,result]).toString('hex')
        vmInstance.txRunner.rawRun({"from":mainAccount,"to":contractAddr,"gasLimit":gasLimit,"value":0,"data":"0x27dc297e"+callbackData}, function(e, tx){
          var resultTx = tx
          tx = tx.result
          if(e || tx.vm.exceptionError){
            var error = e || tx.vm.exceptionError
            var $button = $('<div class="debugTx"><button title="Launch Debugger" class="debug"><i class="fa fa-bug"></i></div></div>');
            result = '<span style="color:#F00;">'+error+'</span>'
            $button.click(function(){
              vmInstance.event.trigger("debugRequested",[resultTx])
            })
            console.log(error)
          }
          $('#query_'+myid).append('<span class="queryResult">=</span> '+result)
          if($button) $('#query_'+myid).append($button)
        })
      } else {
        var inputProof = (proof.length==46) ? bs58.decode(proof) : proof
        var callbackData = ethJSABI.rawEncode(["bytes32","string","bytes"],[myid,result,inputProof]).toString('hex')
        vmInstance.txRunner.rawRun({"from":mainAccount,"to":contractAddr,"gasLimit":gasLimit,"value":0,"data":"0x38BBFA50"+callbackData}, function(e, tx){
          var resultTx = tx
          tx = tx.result
          if(e || tx.vm.exceptionError){
            var error = e || tx.vm.exceptionError
            var $button = $('<div class="debugTx"><button title="Launch Debugger" class="debug"><i class="fa fa-bug"></i></div></div>');
            result = '<span style="color:#F00;">'+error+'</span>'
            $button.click(function(){
              vmInstance.event.trigger("debugRequested",[resultTx])
            })
            console.log(error)
          }
          $('#query_'+myid).append('<span class="queryResult">=</span> '+result+'<br><span style="color:#666;">Proof:</span> '+proof)
          if($button) $('#query_'+myid).append($button)
        })
          console.log('proof: '+proof)
      }
      updateQueryNotification(1)
      console.log('myid: '+myid)
      console.log('result: '+result)
      console.log('Contract '+contractAddr+ ' __callback called')
    }

    function updateQueryNotification(count){
      var activeTab = $('#optionViews').attr('class')
      $('#oraclizeWarning, #oraclizeAdditionalWarning').hide()
      if(activeTab!='oraclizeView'){
        $('#queryNotification').show()
        $('#queryNotification').html(count+parseInt($('#queryNotification').text()))
      }
    }

    $('.oraclizeView').on('click', function(e){
      e.preventDefault()
      $('#queryNotification').hide()
      $('#queryNotification').html('0')
    })

    $('.clearQueries').on('click', function(e){
      e.preventDefault()
      $('#queryHistoryContainer').html('')
    })

  }
}

function createQuery(query, callback){
  request.post('https://api.oraclize.it/v1/query/create', {body: JSON.stringify(query), headers:{"X-User-Agent":"browser-solidity","Content-Type":"application/json"} }, function (error, response, body) {
    if (error) console.log(error)
    if (response.statusCode == 200) {
      callback(body)
    } else {
      $('#oraclizeAdditionalWarning').show()
      $('#oraclizeWarning').show()
      $('#queryNotification').hide()
    }
  })
}

function checkQueryStatus(query_id, callback){
  request.get('https://api.oraclize.it/v1/query/'+query_id+'/status', { headers:{"X-User-Agent":"browser-solidity","Content-Type":"application/json"} }, function (error, response, body) {
    if (error) console.log(error)
    if (response.statusCode == 200) {
      callback(body)
    } else {
      $('#oraclizeAdditionalWarning').show()
      $('#oraclizeWarning').show()
      $('#queryNotification').hide()
    }
  })
}


module.exports = {
  'generateOraclize': generateOraclize
}
